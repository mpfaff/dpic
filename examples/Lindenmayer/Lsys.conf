##########################################################################
# Lsys.conf
# Fun with L-systems: see http://paulbourke.net/fractals/lsys/
#  and https://en.wikipedia.org/wiki/L-system

ifdef(`libgen_',,`include(libgen.m4)divert(-1)')

#Char   macro    Meaning
#   F	F        Move forward by line length drawing a line: linelen
#   f	f        Move forward by line length without drawing a line
#   +	P        Turn left by turning angle: phi
#   -	M        Turn right by turning angle
#   |	R        Reverse direction (ie: turn by 180 degrees)
#   [	psh      Push current drawing state onto stack
#   ]	pop      Pop current drawing state from the stack
#   #	wi       Increment the line width by line width increment: lwi
#   !	wd       Decrement the line width by line width increment
#   @	dot      Draw a dot with line width radius: lwr
#   {	op       Open a polygon
#   }	cp       Close a polygon and fill it with fill colour: fillcolor
#   >	lm       Multiply the line length by the line length scale factor: llsf
#   <	ld       Divide the line length by the line length scale factor
#   &	swp      Swap the meaning of + and -
#   (	dphi     Decrement turning angle by turning angle increment: tai
#   )	iphi     Increment turning angle by turning angle increment

# We use m4 macros for recursion and dpic macros for drawing
define(`dotrad_',(linethick bp__))
define(`fillcolor',`rgbstring(1,0,0)') # default red

# NOTE: the following are pic macros

#                L_init( local definitions )
`define L_init' { # set defaults:
  angle = 90
  linelen = linewid
  phi = 90
  dep = 0
  lwi = linethick
  lwr = dotrad_
  llsf = 2
  tai = 0
  $1
  }

`define F' { line right cosd(angle)*linelen up sind(angle)*linelen ;}
`define f' { move right cosd(angle)*linelen up sind(angle)*linelen ;}
`define P' { angle +=phi ;}
`define M' { angle -=phi ;}
`define R' { angle +=180 ;}
`define psh' {
  dep +=1 
  exec "{"
  angle[dep] = angle
  }
`define pop' {
  angle = angle[dep]
  exec "}"
  dep -=1
  }
`define wi' { linethick += lwi ;}
`define wd' { linethick -= lwi ;}
`define dot' { linethick -= lwi ;}
`define op' {}
`define cp' { shaded fillcolor }
`define lm' { linelen *= llsf ;}
`define ld' { linelen /= llsf ;}
`define swp' { `define MM' { P }
               `define P' { M }
               `define M' { MM } }
`define iphi' { phi += tai }
`define dphi' { phi -= tai }

define(`Produce',`ifelse(eval(`$1'<`$2'),1,
 `Produce(incr(`$1'),`$2',$3)',
 `$3')')
##########################################################################

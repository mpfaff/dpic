P2C(1)                      General Commands Manual                     P2C(1)



[1mNAME[0m
       p2c - Pascal to C translator, version 1.21alpha-07.Dec.93

[1mSYNOPSIS[0m
       [1mp2c [22m[ options ] [ file [ module ] ]

[1mDESCRIPTION[0m
       [4mP2c[24m  is  a tool for translating Pascal programs into C.  The input con‚Äê
       sists of a set of source files in any of the following Pascal dialects:
       HP Pascal, Turbo/UCSD Pascal, DEC VAX Pascal, Oregon Software Pascal/2,
       Macintosh Programmer's  Workshop  Pascal,  Sun/Berkeley  Pascal,  Texas
       Instruments Pascal, Apollo Domain Pascal.  Modula-2 syntax is also sup‚Äê
       ported.  Output is a set of [1m.c [22mand [1m.h [22mfiles that comprise an equivalent
       program  in  any  of  several  dialects  of C.  Output code may be kept
       machine- and dialect-independent, or it may be targeted to  a  specific
       machine  and  compiler.   Most reasonable Pascal programs are converted
       into fully functional C which will compile and run with no further mod‚Äê
       ifications, although [4mp2c[24m sometimes chooses to generate readable code at
       the expense of absolute generality.  [4mP2c[24m endeavors to insert notes  and
       warning  messages  into  the  output  code to point out areas which may
       require human intervention.  Output code is arranged to be readable and
       efficient,  and  to  make  use of C idioms wherever possible.  The main
       goal of the translation is to produce C files which  are  pleasant  and
       "natural"  enough  to  be acceptable as the new source files for a pro‚Äê
       gram.  In a pinch, [4mp2c[24m will also serve as an ad  hoc  Pascal  compiler.
       The [1mp2cc[22m(1) script makes it easy to use [4mp2c[24m as a compiler.

       Code generated by [4mp2c[24m normally does not assume characters are signed or
       unsigned.  Also, it assumes [1mint [22mis the same as either [1mshort [22mor [1mlong [22mbut
       does  not  depend on which.  However, if [1mint [22mis not the same as [1mlong [22mit
       is best to use a modern C compiler which supports  prototypes.   Gener‚Äê
       ated  code  does  not require an ANSI-compatible compiler (unless ANSI-
       style code is requested), but it does use various ANSI-standard library
       routines.

       All generated code includes the file [4m<p2c/p2c.h>[24m which in turn includes
       [4m<stdio.h>[24m and various other common resources.   Also,  many  translated
       programs  will  need  to be linked with the run-time library, typically
       [4m-lp2c.[0m

       Given a file name, [4mp2c[24m reads from the specified file and outputs  to  a
       file with a [1m.c [22msuffix added or substituted.  For example,

            p2c myfile.pas

       reads from [4mmyfile.pas[24m to produce the file [4mmyfile.c.[24m  The input file may
       contain a Pascal main program or a single Pascal module (or  "unit"  in
       Turbo and UCSD Pascal nomenclature), or it may just contain a number of
       procedures and declarations.  [4mP2c[24m is designed to work for correct input
       programs.   That  is, it will accept partial programs but may occasion‚Äê
       ally core dump if the input refers to undefined symbols.

       If the input is a module, the translator will also produce a file  [4mmod‚Äê[0m
       [4mule[24m[1m.h  [22mcontaining a translation of the module's interface section.  The
       implementation section may be omitted in which case only  the  [1m.h  [22mfile
       will be interesting.  If the program or module has include files, these
       may cause additional [1m.c [22mfiles to be generated depending on the value of
       the [1mExpandIncludes [22moption (see below).

       If  no file name is given, [4mp2c[24m reads Pascal from the standard input and
       writes the resulting C to standard output (though a [1m.h [22mfile  may  still
       be  produced).   If a file name and module name are given, the file may
       include several modules (or units).  The  specified  module  is  trans‚Äê
       lated; any others are skipped.  The output files will be named [4mmodule[24m[1m.c[0m
       and [4mmodule[24m[1m.h[4m[22m.[24m  [4mP2c[24m never translates more than one module per run.

       Before      starting,      [4mp2c[24m      reads      the      file      [4m/cyg‚Äê[0m
       [4mdrive/d/Dwight/ndpic/src/p2c/src/p2crc[24m  for  a  number of configuration
       parameters.  (The actual path used on your system  may  vary.   The  [1m-i[0m
       option  is a handy way to examine this file.)  If the P2CRC environment
       variable is set, it gives the name of a file to  read  instead  of  the
       system  file;  this file can start with [1mInclude %H/p2crc [22mto include the
       system file.  Next, [4mp2c[24m attempts to read the file [4mp2crc[24m in your  direc‚Äê
       tory for further configuration.  If this file does not exist, [4mp2c[24m looks
       for [4m.p2crc[24m instead.

[1mOPTIONS[0m
       [1m-o [4m[22mcfile[0m
              Use [4mcfile[24m in place of [4mfile[24m[1m.c [22mor [4mmodule[24m[1m.c [22mas the  primary  output
              file.   A  single  dash (`-o -') says to write the C code to the
              standard output.

       [1m-h [4m[22mhfile[0m
              Use [4mhfile[24m in place of [4mmodule[24m[1m.h [22mas the output file for  interface
              text.   This only has effect if the input is an HP Pascal module
              or a Turbo Pascal unit.

       [1m-s [4m[22msfile[0m
              Read interface text from [4msfile[24m before beginning the translation.
              This  file  typically  contains  one or more modules, often with
              implementation sections omitted for speed, which the program  or
              module being translated will use.  (Typically the [1mImportFrom [22mand
              [1mImportDir [22mparameters in [4mp2crc[24m are set up to allow [4mp2c[24m to  locate
              interface  text  without  needing any [1m-s [22moptions.)  If there are
              several [1m-s [22moptions in the command, the [4msfiles[24m are read from left
              to right.

       [1m-p[4m[22mn[24m    Display  progress  of  translation  in  the  form of a line num‚Äê
              ber/file name display.  This is refreshed every [4mn[24m lines,  25  by
              default.

       [1m-c [4m[22mrcfile[0m
              Read  local  configuration commands from [4mrcfile[24m instead of [4mp2crc[0m
              or [4m.p2crc.[24m  A dash (`-c -') in place of [4mrcfile[24m causes  no  local
              configuration file to be used.

       [1m-v     [22m("Vanilla.")   Do  not  read  from the system configuration file
              [4m/cygdrive/d/Dwight/ndpic/src/p2c/src/p2crc.[24m  Since some  of  the
              parameters  in  this file are required, your local configuration
              file must include those  parameters  instead.   This  also  sup‚Äê
              presses the file named by the P2CRC environment variable.

       [1m-H [4m[22mhomedir[0m
              Use  [4mhomedir[24m  instead of [4m/cygdrive/d/Dwight/ndpic/src/p2c/src[24m as
              the [4mp2c[24m home directory.  The system [4mp2crc[24m file will be  searched
              for in this directory.

       [1m-I[4m[22mpattern[0m
              Add  [4mpattern[24m to the [1mImportDir [22msearch list of places to find mod‚Äê
              ules which are imported.  The pattern should  include  a  [4m%s[24m  to
              represent  the  module  name, and should evaluate to a potential
              file name for that module's source code.  For example, [1m../%s.pas[0m
              looks for [4mmodulename[24m[1m.pas [22min the parent of the current directory.

       [1m-i     [22mThis special option (which must be the only argument on the com‚Äê
              mand line if used) simply copies the system  configuration  file
              [4m/cygdrive/d/Dwight/ndpic/src/p2c/src/p2crc[24m  to the standard out‚Äê
              put in its entirety.  (It may be used with [1m-H[22m, but  [1m-i  [22mis  most
              useful  precisely  when  you don't know the location of the home
              directory.)

       [1m-q     [22mQuiet mode.  Suppresses output of status messages during  trans‚Äê
              lation.

       [1m-E[4m[22mn[24m    Abort  translation  after [4mn[24m errors.  If [4mn[24m is omitted it defaults
              to zero, which means unlimited errors are allowed.  Use  [1m-E1  [22mto
              make [4mp2c[24m halt after the first error.

       [1m-e     [22mEcho  the  Pascal  source  into  the  output file, surrounded by
              #ifdefs.  This is the same as the [1mCopySource  [22mparameter  in  the
              [4mp2crc[24m file.

       [1m-a     [22mProduce  modern  ANSI  C.  This is a convenient override for the
              [1mAnsiC [22mparameter in the [4mp2crc[24m file.

       [1m-L [4m[22mlanguage[0m
              Select input language name, such as VAX or  TURBO.   This  is  a
              convenient override for the [1mLanguage [22mparameter.

       [1m-V     [22mVerbose  mode.  This causes [4mp2c[24m to generate an additional ".log"
              file with further details of the translation, such as a list  of
              warnings  and  notes including those which are suppressed in the
              regular output.

       [1m-comp  [22mCompiler mode.  This switch tells [4mp2c[24m to use various  configura‚Äê
              tion  defaults  that  are more suitable for use as a Pascal com‚Äê
              piler rather than a translator.  It is the  same  as  specifying
              the following options in your [4mp2crc[24m file:

                   ElimDeadCode 0
                   AnalyzeFlow 0
                   MaxLineBreakTies 0
                   FoldConstants 1
                   FoldStrConstants 1
                   OffsetForLoops 0
                   StaticLinks 1
                   BitwiseMod 0
                   BitwiseDiv 0
                   AssumeBits 0
                   AssumeSigns 0
                   FormatStrings 1
                   StructFiles 1
                   FullStrWrite 1

              The  [4mp2cc[24m  script specifies this option when it runs [4mp2c[24m to com‚Äê
              pile a Pascal program.

       [1m-local [22mLocal settings.  This switch uses various configuration defaults
              that are appropriate if the code generated by [4mp2c[24m is going to be
              compiled and run on the same machine that ran [4mp2c[24m itself.

       [1m-check [22mEnable all error checking.  Normally, some error checks are  off
              by  default,  as  described  in the comments in the system [4mp2crc[0m
              file.

       [1m-M0    [22mDisable memory conservation.  This  prevents  [4mp2c[24m  from  freeing
              various data structures after translating each function, in case
              this new conservation feature causes unforseen problems.

       [1m-R     [22mRegression testing mode.  Formats notes and warning messages  in
              a way that makes it easier to run [4mdiff[24m(1) on the output of [4mp2c.[0m

       [4mP2c[24m  also understands a few debugging options which may occasionally be
       useful when tracking down translation problems.  The  [1m-d[4m[22mn[24m  option  sets
       the "debug level" to [4mn,[24m a small integer which is normally zero.  Debug‚Äê
       ging output is written into the regular output file along  with  the  C
       code; the higher your [4mn,[24m the more "wallpaper" you get.  Also, [1m-t [22mprints
       debugging information at every Pascal token, [1m-B[4m[22mn[24m  enables  line-breaker
       debugging,  [1m-C[4m[22mn[24m  enables  comment  placement debugging, and [1m-F[4m[22mn[24m enables
       flow-analysis debugging.

[1mCHOICE OF SOURCE LANGUAGE[0m
       The [1mLanguage [22mconfiguration parameter or [1m-L  [22mcommand-line  option  tells
       [4mp2c[24m  which  Pascal  dialect  to expect in the input file.  Any language
       features which do not overlap between dialects are supported all of the
       time.   The  [1mLanguage  [22mparameter is consulted when a syntax or usage is
       detected that has different meanings in  two  different  dialects,  and
       also  to determine default values for various other translation parame‚Äê
       ters as described below.

       The following language words are supported by  [4mp2c.[24m   Names  are  case-
       insensitive.

       [1mHP      [22mHP  Pascal.   This is the default language.  All features of HP
               Standard Pascal, the Pascal Workstation version, are  supported
               except  as  noted in BUGS below.  Some features of MODCAL, HP's
               extended Pascal, are also supported.  This is a superset of ISO
               standard  Pascal,  including  conformant  arrays and procedural
               parameters.

       [1mHP-UX   [22mHP  Pascal,  HP-UX  version.   Almost  identical  to  the  "HP"
               dialect.

       [1mTurbo   [22mTurbo Pascal 5.0 for the IBM PC.  Few conflicts with HP Pascal,
               so the [1mLanguage [22mparameter is not often needed for Turbo.  (Most
               important  is  that the Turbo and HP dialects use 16 and 32 bit
               integers, respectively.)

       [1mUCSD    [22mUCSD Pascal.  Similar to Turbo in many ways.

       [1mMPW     [22mMacintosh Programmer's Workshop Pascal 2.0.  Should also  do  a
               pretty  good job for Lightspeed Pascal.  Object Pascal features
               are not supported, nor is the  fact  that  [1mchar  [22mvariables  are
               sometimes stored in 16 bits.

       [1mVAX     [22mVAX/VMS Pascal version 3.5.  Most but not all language features
               supported.  This has not yet been tested on large programs.

       [1mOregon  [22mOregon Software Pascal/2.  All features implemented.

       [1mBerk    [22mBerkeley Pascal with Sun extensions.

       [1mTIP     [22mTexas Instruments Pascal.

       [1mApollo  [22mApollo Domain Pascal.

       [1mModula  [22mModula-2.  Based on Wirth's [4mProgramming[24m [4min[24m [4mModula-2,[24m  3rd  edi‚Äê
               tion.    Proper  setting  of  the  [1mLanguage  [22mparameter  is  [4mnot[0m
               optional.  Translation will be incomplete in  most  cases,  but
               should  be  good  enough to work with.  Structure of local sub-
               modules is essentially ignored; like-named identifiers  may  be
               confused.   Type  WORD  is  translated  as an integer, but type
               ADDRESS is translated as char *  or  void  *;  this  may  cause
               inconsistencies in the output code.

               Modula-2  modules  have  two  parts in separate files.  Suppose
               these are called [4mfoo.def[24m (definition part) and [4mfoo.mod[24m  (imple‚Äê
               mentation  part)  for  module  [4mfoo.[24m  Then a pattern like [1m%s.def[0m
               must be included in the [1mImportDir [22mlist, and [1mLibraryFile [22mmust be
               changed to refer to [4msystem.m2[24m instead of [4msystem.imp.[24m  To trans‚Äê
               late the definition part, give the command

                    p2c foo.def

               to translate the definition part into files  [4mfoo.h[24m  and  [4mfoo.c[24m;
               the latter will usually be empty.  The command

                    p2c -s foo.def foo.mod

               will translate the implementation part into file [4mfoo.c.[0m

       Even  if all language features are supported for a dialect, some prede‚Äê
       fined functions may be omitted.  In these cases, the function call will
       be  translated literally into C with a warning.  Some hand modification
       may be required.

[1mCONFIGURATION PARAMETERS[0m
       [4mP2c[24m is highly configurable.  The defaults are suitable for most  appli‚Äê
       cations,  but  customizing  these parameters will help you get the best
       possible translation.  Since the output of [4mp2c[24m is intended to  be  used
       as  human-maintainable  source  code,  there  are  many  parameters for
       describing the coding style and conventions you  prefer.   Others  give
       hints  about your program that help [4mp2c[24m to generate more correct, effi‚Äê
       cient, or readable code.

       The [4mp2crc[24m files contain a list of parameters, one per line.  The system
       configuration  file,  which  may  be viewed using the [1m-i [22moption to [4mp2c,[0m
       serves as an example of the proper format.  Parameter names  are  case-
       insensitive.   If  a  parameter  name occurs exactly once in the system
       [4mp2crc,[24m this indicates that it must have a unique  value  and  the  last
       value given to it by the configuration files is used.  Other parameters
       are written several times in a row; these are lists to which each  con‚Äê
       figuration line adds an entry.

       Many  [4mp2crc[24m options take a numeric value of 0 or 1, roughly correspond‚Äê
       ing to "no" or "yes."  Sometimes a blank value or the value "[1mdef[22m"  cor‚Äê
       responds  to an intermediate "maybe" state.  For example, the stylistic
       option [1mExtraParens [22mswitches between copious or minimal  parentheses  in
       expressions,  with  the  default being a nice compromise intended to be
       best for readers with an average knowledge of C operator precedences.

       Configuration options may also be embedded in the source  file  in  the
       form of Pascal comments:

            {ShortOpt=0} {AvoidName=fred}
            {FuncMacro slope(x,y)=atan2(y,x)*RadDeg}

       disables  automatic  short-circuiting  of  [1mand [22mand [1mor [22mexpressions, adds
       "[4mfred[24m" to the list of names to avoid using in  generated  C  code,  and
       defines  a  special translation for the Pascal program's [4mslope[24m function
       using the standard C [4matan2[24m function and a  constant  [4mRadDeg[24m  presumably
       defined  in the program.  Whitespace is generally not allowed in embed‚Äê
       ded parameters.  The `=' sign  is  required  for  embedded  parameters,
       though it is optional in [4mp2crc[24m files.  Comments within embedded parame‚Äê
       ters are delimited by `##'.  Numeric parameters may  replace  `='  with
       `+' or `-' to increase or decrease the parameter; list-based parameters
       may use `-' to remove a name from a list rather than adding it.   Also,
       the  parameter  name  by  itself in comment braces means to restore the
       parameter's value that was current before the last change:

            {VarFiles=0  ## Pass FILE *'s params by value even if VAR}
            [4msome[24m [4mdeclarations[0m
            {VarFiles    ## Back to original FILE * passing}

       causes the parameter [1mVarFiles [22mto have the value 0 for those few  decla‚Äê
       rations, without affecting the parameter's value elsewhere in the file.

       If  an  embedded  parameter  appears in an include file or in interface
       text for a module, the effect of the assignment normally  carries  over
       to any programs that included that file.  If the parameter name is pre‚Äê
       ceded by a `*', then the assignment is automatically undone  after  the
       source file that contains it ends:

            {IncludeFrom strings=<p2c/strings.h>}
            {*ExportSymbol=pascal_%s}
            module strings;

       will  record  the location of the [4mstrings[24m module's include file for the
       rest of the translation, but the assignment  of  [1mExportSymbol  [22mpertains
       only to the module itself.

       For  the complete list of [4mp2crc[24m parameters, run [4mp2c[24m with the [1m-i [22moption.
       Here are some additional comments on selected parameters:

       [1mImportAll      [22mBecause Turbo Pascal only allows  one  unit  per  source
                      file, [4mp2c[24m normally stops reading past the word [4mimplemen‚Äê[0m
                      [4mtation[24m in a file being scanned for interface text.   But
                      HP  Pascal  allows  several modules per file and so this
                      would not be safe to do.  The [1mImportAll [22moption lets  you
                      override the default behavior for your Pascal dialect.

       [1mAnsiC          [22mThis parameter selects which dialect of C to use.  If 1,
                      all conventions of ANSI C such  as  prototypes,  [1mvoid  *[0m
                      pointers,  etc.  are used.  If 0, only strict K&R (first
                      edition) C is used.  The default is to use  "traditional
                      UNIX  C," which includes [1menum [22mand [1mvoid [22mbut not [1mvoid * [22mor
                      prototypes.  Once again there  are  a  number  of  other
                      parameters  which  may be used to control the individual
                      features if just setting [1mAnsiC [22mis not enough.

       [1mC++            [22mThis tells [4mp2c[24m to use a number  of  language  extensions
                      present  in C++:  Specifically, it enables the "//" for‚Äê
                      mat for comments, use of "anonymous unions" for  variant
                      records,  use  of declarations within the function body,
                      use of references for VAR parameters, and use  of  "new"
                      and  "delete"  instead of "malloc" and "free".  [4mP2c[24m will
                      check for collisions with C++ reserved words unless  you
                      explicitly set the C++ option to zero.

       [1mTurboObjects   [4m[22mP2c[24m  recognizes  two  major  dialects of object-oriented
                      Pascal.  Turbo Pascal 6.0 [1mobject [22mtypes translate  fairly
                      directly  into  C++  classes.  In Apple's Object Pascal,
                      the [1mobject [22mtype has similar syntax but represents a han‚Äê
                      dle  (a  double  pointer)  to  an  object rather than an
                      object itself.  The [1mTurboObjects [22moption  (whose  default
                      is  determined  by  the  [1mLanguage  [22msetting) says whether
                      objects should be direct or indirect  through  pointers.
                      ([4mP2c[24m uses pointers instead of handles; [4mp2c[24m is most often
                      used to make programs more  portable,  and  few  systems
                      except the Mac use handles in this way.)

       [1mUseVExtern     [22mMany  non-UNIX  linkers  prohibit  variables  from being
                      defined (not declared) by more  than  one  source  file.
                      One  module must declare, e.g., "int foo;", and all oth‚Äê
                      ers must declare "extern int  foo;".   [4mP2c[24m  accomplishes
                      this  by  declaring public variables "[1mvextern[22m" in header
                      files, and arranging for the macro [1mvextern [22mto expand  to
                      [1mextern  [22mor  to  nothing  when  appropriate.   If you set
                      [1mUseVExtern[22m=0 [4mp2c[24m will instead  declare  variables  in  a
                      simpler way that works only on UNIX-style linkers.

       [1mUseAnyptrMacros[0m
                      Certain  C  reserved  words have meanings which may vary
                      from one C implementation to another.  [4mP2c[24m uses  special
                      capitalized  names  for  these  words;  these  names are
                      defined as macros in the file [4mp2c.h[24m which all translated
                      programs include.  You can set [1mUseAnyptrMacros[22m=0 to dis‚Äê
                      able the use of these macros.  Note that  the  functions
                      of  many  of these macros can also be had directly using
                      other parameters; for example, [1mUseConsts [22mallows  you  to
                      specify whether your target language recognizes the word
                      [1mconst [22min constant declarations.  The default is  to  use
                      the  [1mConst [22mmacro instead, so that your code will be por‚Äê
                      table to either kind of implementation.

                      [1mSigned [22mexpands to the reserved word [1msigned [22mif that  word
                      is  available,  otherwise it is given a null definition.
                      Similarly, [1mConst [22mexpands to [1mconst  [22mif  that  feature  is
                      available.   The  words  [1mVolatile  [22mand [1mRegister [22mare also
                      defined in [4mp2c.h,[24m although [4mp2c[24m  does  not  use  them  at
                      present.   The word [1mChar [22mexpands to [1mchar [22mby default, but
                      might need to be redefined to [1msigned  char  [22mor  [1munsigned[0m
                      [1mchar  [22min  a particular implementation.  This is used for
                      the Pascal character type; lowercase [1mchar [22mis  used  when
                      the desired meaning is "byte," not "character."

                      The  word  [1mStatic  [22malways  expands to [1mstatic [22mby default.
                      This is used in situations where a function or  variable
                      is  declared static to make it local to the source file;
                      lowercase [1mstatic [22mis used  for  static  local  variables.
                      Thus  you  can redefine [1mStatic [22mto be null if you want to
                      force private names to be public for purposes of  debug‚Äê
                      ging.

                      The  word  [1mVoid [22mexpands to [1mvoid [22min all cases; it is used
                      when declaring a function with  no  return  value.   The
                      word  [1mAnyptr [22mis a typedef for [1mvoid * [22mor [1mchar * [22mas neces‚Äê
                      sary; it represents a generic pointer.

       [1mUsePPMacros    [22mThe [4mp2c.h[24m header also declares two macros  for  function
                      prototyping,  [1mPP[22m(x)  and [1mPV[22m().  These macros are used as
                      follows:

                           Void foo  PP( (int x, int y, Char *z) );
                           Char *bar PV( );

                      If prototypes are available, these macros will expand to

                           Void foo  (int x, int y, Char *z);
                           Char *bar (void);

                      but if only old-style declarations  are  supported,  you
                      instead get

                           Void foo  ();
                           Char *bar ();

                      By  default, [4mp2c[24m uses these macros for all function dec‚Äê
                      larations, but function [4mdefinitions[24m are written in  old-
                      style  C.   The [1mUsePPMacros [22mparameter can be set to 0 to
                      disable all use of [1mPP [22mand [1mPV[22m, or it can be set to  1  to
                      use  the macros even when defining a function.  (This is
                      accomplished by preceding each old-style definition with
                      a  [1mPP[22m-style  declaration.)   If  you know your code will
                      always be compiled on systems that support  prototyping,
                      it  is prettier to set [1mPrototypes[22m=1 or simply [1mAnsiC[22m=1 to
                      get true function prototypes.

       [1mEatNotes       [22mNotes and  warning  messages  containing  any  of  these
                      strings  as  sub-strings  are not emitted.  Each type of
                      message includes an identifier like [1m[145][22m; you  can  add
                      this  identifier  to  the [1mEatNotes [22mlist to suppress that
                      message.  Another useful form is to use a variable  name
                      or  other  identifier  to  suppress  warnings about that
                      variable.  The strings are a space-separated  list,  and
                      thus may not contain embedded spaces.  To suppress notes
                      around a section of code,  use,  e.g.,  [4m{EatNotes+[145]}[0m
                      and  [4m{EatNotes-[145]}.[24m   Most notes are generated during
                      parsing, but to suppress those generated  during  output
                      the string may need to remain in the list far beyond the
                      point where it appears to be generated.  Use the  string
                      "1" or "0" to disable or enable all notes, respectively.

       [1mExpandIncludes [22mThe default action is to expand Pascal include files in-
                      line.  This may not be desirable if  include  files  are
                      being  used to simulate modules.  With [1mExpandIncludes[22m=0,
                      [4mp2c[24m attempts to convert include  files  containing  only
                      whole  procedures and global declarations into analogous
                      C include files.  This may not always work,  though;  if
                      you  get error messages, don't use this option.  By com‚Äê
                      bining this option with  [1mStaticFunctions[22m=0,  then  doing
                      some fairly minor editing on the result, you can convert
                      a pseudo-modular Pascal program  into  a  truly  modular
                      collection of C source files.

       [1mElimDeadCode   [22mSome  transformations  that  [4mp2c[24m does on the program may
                      result in unreachable or "dead" code.   By  default  [4mp2c[0m
                      removes such code, but sometimes it removes more than it
                      should.  If you have "if false" segments which you  wish
                      to retain in C, you may have to set [1mElimDeadCode[22m=0.

       [1mAnalyzeFlow    [22mBy  default [4mp2c[24m does some basic dataflow analysis on the
                      program in an attempt to locate code that can be simpli‚Äê
                      fied  due to knowledge about the possible values of cer‚Äê
                      tain variables.  For example, a Pascal [1mrewrite [22mstatement
                      must  translate  to  an  [1mif [22mthat either calls [1mfopen [22mon a
                      formerly closed file variable, or [1mfreopen [22mon an already-
                      open file.  If flow analysis can prove that the file was
                      open or closed upon  entry  to  the  statement,  a  much
                      cleaner translation is possible.

                      It  is possible that flow analysis will make simplifica‚Äê
                      tions that are undesirable or buggy.   If  this  occurs,
                      you can set [1mAnalyzeFlow [22mto 0 to disable this feature.

       [1mSkipIndices    [22mNormally  Pascal  arrays not based at zero are "shifted"
                      down for C, preserving the total size of the  array.   A
                      Pascal  array  a[2..10]  is translated to a C array a[9]
                      with references like "a[i]" changed to  "a[i-2]"  every‚Äê
                      where.  If [1mSkipIndices [22mis set to a value of 2 or higher,
                      this array would instead be translated to a[11] with the
                      first  two  elements  never  used.  This arrangement may
                      generate incorrect code, though, for tricky source  pro‚Äê
                      grams.

       [1mFoldConstants  [22mPascal  non-structured  constants generally translate to
                      [1m#define[22m's in C.  Set this to 1 to have constants instan‚Äê
                      tiated directly into the code.  This may be turned on or
                      off around specific constant declarations.  Set this  to
                      0  to  force [4mp2c[24m to make absolutely no assumptions about
                      the constant's value in generated code, so that you  can
                      change  the constant later in the C code without invali‚Äê
                      dating the translation.  The default is to allow [4mp2c[24m  to
                      take  advantage  of its knowledge of a constant's value,
                      such as by generating code that assumes the constant  is
                      positive.

       [1mCharConsts     [22mThis governs whether single-character string literals in
                      Pascal [1mconst [22mdeclarations should be interpreted as char‚Äê
                      acters  or  strings.   In other words, [4mconst[24m [4ma='x';[24m will
                      translate  to  [4m#define[24m  [4ma[24m  [4m'x'[24m  if   [1mCharConsts[22m=1   (the
                      default),  or to [4m#define[24m [4ma[24m [4mx[24m if [1mCharConsts[22m=0.  Note that
                      if [4mp2c[24m guesses wrong, the generated  code  will  not  be
                      wrong,  just  uglier.  For example, if [4ma[24m is written as a
                      character constant but it turns out  to  be  used  as  a
                      string, [4mp2c[24m will have to write char-to-string conversion
                      code each time the constant is used.

       [1mPreserveTypes  [4m[22mP2c[24m makes an attempt to retain the original  names  used
                      for data types.  For example,

                           type foo = integer; bar = integer;

                      establishes  two synonyms for the standard integer type;
                      [4mp2c[24m does its best to  preserve  the  particular  synonym
                      that was used to declare each integer variable.  Because
                      the Pascal language treats these types as indistinguish‚Äê
                      able,  there  will be cases in the translation where [4mp2c[0m
                      must fall back on the "true" type,  [1mint[22m.   [1mPreserveTypes[0m
                      and  a few related options control whether various kinds
                      of type names are preserved.  The default settings  pre‚Äê
                      serve all type names except for pointer types, which use
                      "*" notation throught the program.   This  reflects  the
                      fact  that  Pascal forces pointer types to be named when
                      traditionally they are not separately named in C.

       [1mVarStrings     [22mIn HP Pascal, a parameter of the form "var s  :  string"
                      will  match a string variable of any size; a hidden size
                      parameter is passed which may be accessed by the  Pascal
                      [4mstrmax[24m  function.   You  can prevent [4mp2c[24m from creating a
                      hidden size parameter by  setting  [1mVarStrings[22m=0.   (Note
                      that  each  function  uses the value of [1mVarStrings [22mas of
                      the [4mfirst[24m declaration of the function  that  is  parsed,
                      which is often in the interface section of a module.)

       [1mPrototypes     [22mControl  whether  ANSI  C  function prototypes are used.
                      Default is according to [1mAnsiC [22mor [1mC++[22m.   This  also  con‚Äê
                      trols  whether  to include parameter names or just their
                      types in situations where names are optional.  The [1mFull‚Äê[0m
                      [1mPrototyping  [22mparameter allows prototypes to be generated
                      for declarations but not for definitions (older versions
                      of Lightspeed C required this).  If you use a mixture of
                      prototypes and old-style definitions, types  like  short
                      and float will be promoted to int and double as required
                      by the ANSI standard,  unless  [1mPromoteArgs  [22mis  used  to
                      override  this.  The [1mCastArgs [22mparameter controls whether
                      type-casts are used in function  arguments;  by  default
                      they are used only if prototypes are not available.

       [1mStaticLinks    [22mHP  Pascal  and Turbo Pascal each include the concept of
                      procedure or function  pointers,  though  with  somewhat
                      different  syntaxes.   [4mP2c[24m  recognizes  both  notational
                      styles.   Another  difference  is  that  HP's  procedure
                      pointers  can  point to nested procedures, while Turbo's
                      can point only to global procedures.   In  HP  Pascal  a
                      procedure  pointer must be stored as a [1mstruct [22mcontaining
                      both a pure C function pointer and a  "static  link,"  a
                      pointer  to  the parent procedure's locals.  (The static
                      link is NULL for global procedures.)  This notation  can
                      be  forced  by  setting  [1mStaticLinks[22m=1.   In  Turbo, the
                      default ([1mStaticLinks[22m=0)  is  to  use  plain  C  function
                      pointers  with  no static links.  A third option ([1mStati‚Äê[0m
                      [1mcLinks[22m=2) uses structures with static links, but assumes
                      the links are always NULL when calling through a pointer
                      (if you need compatibility with the HP format  but  know
                      your procedures are global).

       [1mSmallSetConst  [22mPascal  sets  are  translated  into  one of two formats,
                      depending on the size of the set.  If all elements  have
                      ordinal values in the range 0..31, the set is translated
                      as a single integer variable using bit operations.  (The
                      [1mSetBits  [22mparameter may be used to change the upper limit
                      of 31.)  The [1mSmallSetConst  [22mparameter  controls  whether
                      these small-sets are used, and, if so, how constant sets
                      should be represented in C.  For larger sets,  an  array
                      of  [1mlong  [22mis used.  The [4ms[24m[0] element contains the number
                      of succeeding array elements which are in use.  Set ele‚Äê
                      ments  in  the  range 0..31 are stored in the [4ms[24m[1] array
                      element, and so on.  Sets are normalized so that [4ms[24m[[4ms[24m[0]]
                      is  nonzero for any nonempty set.  The standard run-time
                      library includes all the necessary procedures for  oper‚Äê
                      ating on sets.

       [1mReturnValueName[0m
                      This  is  one  of  many "naming conventions" parameters.
                      Most of these take the form of a [4mprintf[24m-like string con‚Äê
                      taining  a  [4m%s[24m where the relevant information should go.
                      In the case of [1mReturnValueName[22m, the [4m%s[24m refers to a func‚Äê
                      tion name and the resulting string gives the name of the
                      variable to use to hold  the  function's  return  value.
                      Such  a  variable  will  be  made if a function contains
                      assignments to its return value buried within the  body,
                      so  that  [4mreturn[24m statements cannot conveniently be used.
                      Some  parameters  ([1mReturnValueName  [22mincluded)   do   not
                      require  the  [4m%s[24m to be present in the format string; for
                      example, the standard [4mp2crc[24m file stores every function's
                      return value in a variable called [4mResult.[0m

       [1mAlternateName  [4m[22mP2c[24m normally translates Pascal names into C names verba‚Äê
                      tim, but occasionally this is not  possible.   A  Pascal
                      name may be a C reserved word or traditional C name like
                      [4mputc,[24m or there may be several like-named things that are
                      hidden  from  each  other  by Pascal's scoping rules but
                      must be global in C.  In these situations [4mp2c[24m  uses  the
                      parameter [1mAlternateName1 [22mto generate an alternative name
                      for the symbol.  The default is to add an underscore  to
                      the name.  There is also an [1mAlternateName2 [22mparameter for
                      a second alternate name, and an [1mAlternateName  [22mparameter
                      for the [4mn[24mth alternate name.  (The value for this parame‚Äê
                      ter should include both a [4m%s[24m and a [4m%d,[24m in either order.)
                      If  these latter parameters are not defined, [4mp2c[24m applies
                      [1mAlternateName1 [22mmany times over.

       [1mExportSymbol   [22mSymbols in the interface section for a Pascal module are
                      formatted  according  to  the  value of [1mExportSymbol[22m, if
                      any.  It is not uncommon to use [4mmodulename_%s[24m  for  this
                      symbol;  the  default  is [4m%s,[24m i.e., no special treatment
                      for  exported  symbols.   If   you   also   define   the
                      [1mExport_Symbol [22mparameter, that format is used instead for
                      exported symbols which contain an underscore  character.
                      If  [4m%S[24m (with a capital "S") appears in the format string
                      it stands for the current module name.

       [1mAlias          [22mIf the value of this parameter contains a [4m%s,[24m  it  is  a
                      format string applied to the names of external functions
                      or variables.  If the value does not contain  a  [4m%s,[24m  it
                      becomes  the  name  of the next external symbol which is
                      declared (after which the parameter is cleared).

       [1mSynonym        [22mThis creates a synonym for another Pascal symbol or key‚Äê
                      word.  The format is

                           [1mSynonym [4m[22mold-name[24m [4m=[24m [4mnew-name[0m

                      All  occurrences  of  [4mold-name[24m  in  the  input  text are
                      treated as if they were [4mnew-name[24m by the parser.  If [4mnew-[0m
                      [4mname[24m  is  a keyword, [4mold-name[24m will be an equivalent key‚Äê
                      word.  If [4mnew-name[24m is the name of a predefined function,
                      [4mold-name[24m  will  behave in the same way as that function,
                      and so on.  If [4mnew-name[24m is omitted, then occurrences  of
                      [4mold-name[24m  are  entirely ignored in the input file.  Syn‚Äê
                      onyms allow you to skip over a keyword in  your  dialect
                      of  Pascal that is not understood by [4mp2c,[24m or to simulate
                      a keyword or predefined identifier of your dialect  with
                      a similar one that [4mp2c[24m recognizes.  Note that all prede‚Äê
                      fined functions are available at all times; if you  have
                      a  library  routine  that behaves like, e.g., Turbo Pas‚Äê
                      cal's [4mgetmem[24m procedure, you can make your routine a syn‚Äê
                      onym for [4mgetmem[24m even if you are not translating in Turbo
                      mode.

       [1mNameOf         [22mThis defines the name to use in C for a specific symbol.
                      It must appear before the symbol is declared in the Pas‚Äê
                      cal code; it is usually placed in the local  [4mp2crc[24m  file
                      for the project.  The format is

                           [1mNameOf [4m[22mpascal-name[24m [4m=[24m [4mC-name[0m

                      By  default, Pascal names map directly onto C names with
                      no change (except for the various  kinds  of  formatting
                      outlined above).  If the [4mpascal-name[24m is of the form [4mmod‚Äê[0m
                      [4mule.name[24m or [4mprocedure.name[24m then the command applies only
                      to  the  instance  of  the Pascal name that is global to
                      that module, or local to that procedure.  Otherwise,  it
                      applies to all usages of the name.

       [1mVarMacro       [22mThis  is  analogous  to [1mNameOf[22m, but specifically for use
                      with Pascal variables.  The righthand side can  be  most
                      any  C  expression;  all  references to the variable are
                      expanded into that C expression.  Names used  in  the  C
                      expression  are  taken verbatim.  There is also a [1mConst‚Äê[0m
                      [1mMacro [22mparameter for translating constants  as  arbitrary
                      expressions.   Note  that  the  variable on the lefthand
                      side must actually be declared in the program  or  in  a
                      module  that  it uses.  The declaration for the variable
                      will be omitted from the generated code unless the  Pas‚Äê
                      cal-name  appears  in  the  expression:   If  you ask to
                      replace [4mi[24m  with  [4mi+1,[24m  the  variable  [4mi[24m  will  still  be
                      declared  but  its  value  will  be shifted accordingly.
                      Note that if [4mi[24m  appears  on  the  lefthand  side  of  an
                      assignment, [4mp2c[24m will use algebra to "solve" for [4mi.[0m

                      In all cases where [4mp2c[24m parses C expressions, all C oper‚Äê
                      ators are recognized except  compound  assignments  like
                      `+='.   (Increment and decrement operators are allowed.)
                      All variable and function  names  are  assumed  to  have
                      integer  type,  even if they are names that occur in the
                      actual program.  A type-specification operator `::'  has
                      been  introduced;  it  has the same precedence as `.' or
                      `->' but the righthand side must be a Pascal type  iden‚Äê
                      tifier  (built-in  or defined by your program previously
                      to when the macro definition was parsed),  or  an  arbi‚Äê
                      trary  Pascal type expression in parentheses.  The left‚Äê
                      hand argument is then considered to have  the  specified
                      type.   This  may  be necessary if your macro is used in
                      situations where the exact type of the  expression  must
                      be known (say, as the argument to a [4mwriteln[24m).

       [1mFieldMacro     [22mHere  the lefthand side must have the form [4mrecord.field,[0m
                      where [4mrecord[24m is the Pascal type or variable name  for  a
                      record, and [4mfield[24m is a field in that record.  The right‚Äê
                      hand side must be a C expression generally including the
                      name [4mrecord.[24m  All instances of that name are replaced by
                      the actual record being "dotted."  For example,

                           FieldMacro Rect.topLeft = topLeft(Rect)

                      translates [4ma[i].topLeft[24m into [4mtopLeft(a[i]),[24m where  [4ma[24m  is
                      an array of [4mRect.[0m

       [1mFuncMacro      [22mThe  lefthand side must be any Pascal function or proce‚Äê
                      dure name plus a parameter list.  The number of  parame‚Äê
                      ters  must  match  the number in the function's uses and
                      declaration.  Calls to the function are replaced by  the
                      C expression on the righthand side.  For example,

                           FuncMacro PtInRect(p,r) = PtInRect(p,&r)

                      causes  the  second argument of [4mPtInRect[24m to be passed by
                      reference, even though the declaration  says  it's  not.
                      If  the  function in question is actually defined in the
                      program or module being translated, the  [1mFuncMacro  [22mwill
                      not  affect  the definition but it will affect all calls
                      to the function elsewhere in the module.  [1mFuncMacros [22mcan
                      also  be  applied  to  predefined or never-defined func‚Äê
                      tions.

       [1mReplaceBefore  [22mThis option specifies a string replacement to be done on
                      every Pascal source line.  For example:

                           ReplaceBefore     "{$ifdef"     "{EMBED     #ifdef"
                           ReplaceBefore "{$endif}" "{EMBED #endif}"

                      These lines rewrite Turbo Pascal compile-time condition‚Äê
                      als into comments beginning with the special word EMBED.
                      This word instructs p2c to format the rest of  the  com‚Äê
                      ment  without  "/* */" delimiters, i.e., the rest of the
                      comment is embedded directly in the  output  C  program.
                      There  is  also  a  [1mReplaceAfter [22moption, which specifies
                      replacements to be done on the output of [4mp2c.[0m

                      Currently,  this  feature  makes  only  literal   string
                      replacements,  not pattern-based matches.  Some users of
                      [4mp2c[24m have found it useful to feed their  Pascal  programs
                      through  a  more powerful editor like [4msed[24m or [4mperl[24m before
                      giving them to [4mp2c.[24m  Quite often this  is  all  that  is
                      necessary  to  get an acceptable translation in the face
                      of unrecognized Pascal dialects or language features.

       [1mIncludeFrom    [22mThis specifies that a given module's  header  should  be
                      included from a given place.  The second argument may be
                      surrounded by " " or < > as  necessary;  if  the  second
                      argument is omitted, no include directive will be gener‚Äê
                      ated for the module.

       [1mImportFrom     [22mThis specifies that a given  module's  Pascal  interface
                      text  can  be  found  in the given file.  The named file
                      should be either the source file for the  module,  or  a
                      specially  prepared file with the implementation section
                      removed for speed.  If no [1mImportFrom [22mentry is found  for
                      a  module,  the  path  defined  by the [1mImportDir [22mlist is
                      searched.  Each entry in the  path  may  contain  a  [4m%s,[0m
                      which  expands  to  the name of the module.  The default
                      path looks for [4m%s.pas[24m and [4m%s.text[24m in the current  direc‚Äê
                      tory,             then             for             [4m/cyg‚Äê[0m
                      [4mdrive/d/Dwight/ndpic/src/p2c/src/%s.imp.[24m   (where  /cyg‚Äê
                      drive/d/Dwight/ndpic/src/p2c/src  is the [4mp2c[24m home direc‚Äê
                      tory.)

       [1mStructFunction [22mThis parameter is a list of functions which  follow  the
                      [4mp2c[24m  semantics for structure-valued functions (functions
                      returning arrays, sets,  and  strings,  and  structs  in
                      primitive  C  dialects).  For these functions, a pointer
                      to a return-value area is passed to the  function  as  a
                      special first parameter.  The function stores the result
                      in this area, then returns a copy of the pointer.   (The
                      standard  C  function  [4mstrcpy[24m is an example of this con‚Äê
                      cept.  [4mSprintf[24m also behaves this way in  some  dialects;
                      it  always appears on the [1mStructFunction [22mlist regardless
                      of the type of implementation.)  The  system  configura‚Äê
                      tion file includes a list of common structured functions
                      so that [4mp2c[24m's optimizer  will  know  how  to  manipulate
                      them.

       [1mStrlapFunction [22mFunctions  on  this  list  are  structured  functions as
                      above, but with the ability to work in-place;  that  is,
                      the  same pointer may be passed as both the return value
                      area and a regular parameter.

       [1mDeterministic  [22mFunctions on this list have  no  side  effects  or  side
                      dependencies.   An  example  is  the [4msin[24m function in the
                      standard math library; two calls with the same parameter
                      values  produce  the  same  result,  and have no effects
                      other than returning a value.  [4mP2c[24m can make use of  this
                      knowledge  when  optimizing code for efficiency or read‚Äê
                      ability.  Functions on this list are also assumed to  be
                      relatively fast, so that it is acceptable to duplicate a
                      call to the function.

       [1mLeaveAlone     [22mFunctions on this list are not subjected to  the  normal
                      built-in translation rules that [4mp2c[24m would otherwise use.
                      For example, adding [4mwriteln[24m to this list would translate
                      [4mwriteln[24m  statements  blindly into calls to a C [4mwriteln()[0m
                      function, rather than being translated  into  equivalent
                      [4mprintf[24m  calls.   The  built-in  translation is also sup‚Äê
                      pressed if the function has a [1mFuncMacro[22m.

       [1mBufferedFile   [4m[22mP2c[24m normally assumes binary files will  use  [4mread/write,[0m
                      not  [4mget/put/^[24m  notation.   A  file buffer variable will
                      only be created for a file if buffer  notation  is  used
                      for  it.  For global file variables this may be detected
                      too late (a declaration without buffers may already have
                      been written).  Such files can be listed in [1mBufferedFile[0m
                      to force [4mp2c[24m to allocate buffers for them;  do  this  if
                      you  get  a  warning  message that says it is necessary.
                      Set [1mBufferedFile[22m=1 to buffer all files,  in  which  case
                      [1mUnBufferedFile  [22mallows you to force certain files [4mnot[24m to
                      have buffers.

       [1mStructFiles    [22mIf [4mp2c[24m still can't translate your file  operations  cor‚Äê
                      rectly,  you can set [1mStructFiles[22m=1 to cause Pascal files
                      to translate into structs which include the usual C [4mFILE[0m
                      pointer,  as  well  as file buffer and file name fields.
                      While the resulting  code  doesn't  look  as  much  like
                      native  C,  the file structs will allow [4mp2c[24m to do a cor‚Äê
                      rect translation in many more cases.

       [1mCheckFileEOF   [22mNormally  only  file-open  operations  are  checked  for
                      errors.   Additional  error checking, such as read-past-
                      end-of-file, can be enabled with parameters like  [1mCheck‚Äê[0m
                      [1mFileEOF[22m.   These checks can make the code very ugly!  If
                      I/O checking is enabled by the program ([1m$iocheck on$  [22min
                      HP  Pascal;  [1m{$I+}  [22min Turbo; this is always the default
                      state), these checks will generate fatal  errors  unless
                      enclosed  in an HP Pascal [1mtry[22m-[1mrecover [22mconstruct.  If I/O
                      checking is disabled, these will cause the global  vari‚Äê
                      able  [4mP_ioresult[24m  to be set zero or nonzero according to
                      the outcome.  The default for most of these  options  is
                      to check only when I/O checking is enabled.

[1mISSUES[0m
       [1mInteger size.  [4m[22mP2c[24m normally generates code to work with either 16 or 32
       bit ints.  If you know your C integers will be 16 or 32 bits, set  [1mInt‚Äê[0m
       [1mSize  [22mappropriately.   In  particular  setting [1mIntSize[22m=32 will generate
       much cleaner code: [4mp2c[24m no longer must carefully cast function arguments
       between  int  and  long.   These casts also will be unnecessary if ANSI
       prototypes are available.  To disable int/long casting because you know
       at  least  one of these cases will hold, set [1mCastLongArgs[22m=0.  (The [1mCas‚Äê[0m
       [1mtArgs [22mparameter similarly  controls  other  types  of  casts,  such  as
       between  ints  and  doubles.)  The [1mInteger16 [22mparameter controls whether
       Pascal integers are interpreted as 16 or  32  bits,  or  translated  as
       native C integers.  The default value depends on the [1mLanguage [22mselected.

       [1mSigned/unsigned  chars.  [22mPascal characters are normally "weakly" inter‚Äê
       preted as unsigned; this is controlled by [1mUnsignedChar[22m.  The default is
       "either,"  so that C's native [1mchar [22mtype may be used even if its signed-
       ness is unknown.  Code that uses characters outside of the range  0-127
       may  need  a  different  setting.  Alternatively, you can use the types
       [1m{SIGNED} char [22mand [1m{UNSIGNED} char [22min the few cases where it really mat‚Äê
       ters.  These comments are controlled by the [1mSignedComment [22mand [1mUnsigned‚Äê[0m
       [1mComment [22mparameters.  (The type [1m{UNSIGNED} integer [22mis also  recognized.)
       The  [1mSignedChar  [22mparameter  tells  whether  C  characters are signed or
       unsigned (default is "unknown").   The  [1mHasSignedChar  [22mparameter  tells
       whether the phrase "signed char" is legal in the output.  If it is not,
       [4mp2c[24m may have to translate Pascal signed bytes into C shorts.

       [1mSpecial types.  [4m[22mP2c[24m understands the following  predefined  Pascal  type
       names: [1minteger[22m, signed integers depending on [1mInteger16[22m; [1mlongint[22m, signed
       32-bit integers; [1munsigned[22m,  unsigned  32-bit  integers;  [1msword[22m,  signed
       16-bit integers; [1mword[22m, unsigned 16-bit integers; [1mc_int[22m, signed native C
       integers; [1mc_uint[22m, unsigned native C integers; [1msbyte[22m, signed 8-bit inte‚Äê
       gers;  [1mbyte[22m,  unsigned  8-bit  integers;  [1mreal[22m,  floating-point numbers
       depending on [1mDoubleReals[22m; [1msingle[22m,  single-precision  floats;  [1mlongreal[22m,
       [1mdouble[22m,  and  [1mextended[22m,  double-precision  floats;  [1mpointer [22mand [1manyptr[22m,
       generic pointers (assignment-compatible with any pointer type); [1mstring[22m,
       generic  string of length [1mStringDefault [22m(normally 255); also, the usual
       Pascal types [1mchar[22m, [1mboolean[22m, and [1mtext[22m.  (If your Pascal  uses  different
       names for these concepts, the [1mSynonym [22moption will come in handy.)

       [1mEmbedded  code.   [22mIt is possible to write a Pascal comment containing C
       code to be embedded into the output.  See the descriptions of [1mEmbedCom‚Äê[0m
       [1mment  [22mand its relatives in the system [4mp2crc[24m file.  These techniques are
       helpful if you plan to do repeated translations of code that  is  still
       being  maintained  in Pascal.  See the description of [1mReplaceBefore [22mfor
       an example use of embedded code.

       [1mComments and blank lines.  [4m[22mP2c[24m collects the  comments  in  a  procedure
       into  a list.  All comments and statements are stamped with serial num‚Äê
       bers which are used to reattach comments to statements even after  code
       has  been  added,  removed, or rearranged during translation.  "Orphan"
       comments attached to statements that have been  lost  are  attached  to
       nearby  statements or emitted at the end of the procedure.  Blank lines
       are treated as a kind of comment, so [4mp2c[24m will also reproduce your usage
       of  blank  lines.   If the comment mechanism goes awry, you can disable
       comments with [1mEatComments [22mor disable their being attached to code  with
       [1mSpitComments[22m.

       [1mIndentation.   [4m[22mP2c[24m  has a number of parameters to govern indentation of
       code.  The default values produce the GNU  Emacs  standard  indentation
       style,  although  [4mp2c[24m can do a better job since it knows more about the
       code it is  indenting.   Indentation  works  by  applying  "indentation
       deltas," which are either absolute numbers (which override the previous
       indentation), or signed relative numbers (which  augment  the  previous
       indentation).  A delta of "+0" specifies no change in indentation.  All
       of the indentation options are described in the standard [4mp2crc[24m file.

       [1mLine breaking.  [4m[22mP2c[24m uses an algorithm similar to the  TeX  typesetter's
       paragraph  formatter  for breaking long statements into multiple lines.
       A "penalty" is assigned to various undesirable aspects of all  possible
       line breaks; the "badness" of a set of line breaks is approximately the
       sum of all the penalties.  Chief among these are serious penalties  for
       overrunning  the  desired  maximum line length (default 78 columns), an
       infinite penalty for  overrunning  the  absolute  maximum  line  length
       (default 90), and progressively greater penalties for breaking at oper‚Äê
       ators deeply nested in expressions.  Parameters such as  [1mOpBreakPenalty[0m
       control  the  relative  weights of various choices.  [1mBreakArith [22mand its
       neighbors control whether the operator at a line break should be placed
       at  the  end  of the previous line or at the beginning of the next.  If
       you don't want any oversize lines, define [1mMaxLineWidth[22m=78.

       Unlike TeX, [4mp2c[24m's line breaker must actually try all possible  sets  of
       break  points.   To avoid excessive computation, the total penalty con‚Äê
       tributed at each decision point must sum to a nonnegative value;  nega‚Äê
       tive  values  are  clipped  up  to zero.  This allows [4mp2c[24m to prune away
       obviously undesirable alternatives in advance.   The  [1mMaxLineBreakTries[0m
       parameter  (default  5000) controls how many alternatives to try before
       giving up and using the best so far.

       [1mPASCAL_MAIN.  [4m[22mP2c[24m generates a call to this function at the front of the
       main  program.   In  the (unmodified) run-time library all this does is
       save argc and argv away because in both HP and Turbo these are accessed
       as  global  variables.   If you do not wish to use this feature, define
       [1mArgCName [22mto be [4margc,[24m [1mArgVName [22mto be [4margv,[24m and [1mMainName [22m(normally  "PAS‚Äê
       CAL_MAIN")  to  be  blank.   This  will work if argc and argv are never
       accessed outside of your main program.

[1mBUGS[0m
       [4mP2c[24m was designed with the idea that  clean,  readable  output  in  most
       cases  is  worth  more than guaranteed correct output in extreme cases.
       [4mP2c[24m is [4mnot[24m a compiler!  However,  ideally  the  "extreme"  cases  would
       include  only  those which never arise in real life.  Thus if [4mp2c[24m actu‚Äê
       ally generates incorrect code I will consider it a bug, but I will  not
       apologize  for  it. :-)  Below are the major remaining cases where this
       is known to occur.

       Certain kinds of conformant array  parameters  (including  multi-dimen‚Äê
       sional  conformant  arrays)  produce code that declares variable-length
       arrays in C.  Only a few C compilers, such as the GNU C compiler,  sup‚Äê
       port  this  language  extension.  Otherwise some hand re-coding will be
       required.

       HP Pascal [1mtry[22m-[1mrecover [22mstructures are translated into calls to  [4mTRY[24m  and
       [4mRECOVER[24m  macros,  which  are  defined  to  simulate the construct using
       [4msetjmp[24m and [4mlongjmp.[24m  If this emulation does not work, define the symbol
       [1mFAKE_TRY  [22mto cause these macros to become "inert."  (In cases where the
       error is detected by code physically within the body of the [1mtry  [22mstate‚Äê
       ment,  a  C  [1mgoto  [22mto  the [1mrecover [22msection is always generated.)  Also,
       local file variables in scopes which are destroyed by an [1mescape [22mare not
       closed.

       Non-local  GOTO's  and [1mtry[22m-[1mrecover [22mstatements are each implemented, but
       may conflict if both are used at once.   Non-local  GOTO's  are  fairly
       careful  about closing files that go out of scope but may fail to do so
       in the presence of recursion.

       Arrays containing files are not initialized to NULL as other files are.
       In  some  cases,  such  as file variables allocated by NEW, the file is
       initialized but not automatically closed by DISPOSE.

       LINK variables allowing sub-procedures access to their  parents'  vari‚Äê
       ables  are  occasionally omitted by mistake, if the access is too indi‚Äê
       rect for [4mp2c[24m to notice.  If this happens, you can add an explicit  ref‚Äê
       erence  to  a parent variable in the sub-procedure.  A statement of the
       form "a:=a" will count as a reference but then  be  optimized  away  by
       [4mp2c.[0m

       Many  aspects of Modula-2 are translated only superficially.  For exam‚Äê
       ple, the type-compatibility properties of the [4mWORD[24m and  [4mARRAY[24m  [4mOF[24m  [4mWORD[0m
       types are only roughly modelled, as are the scope rules concerning mod‚Äê
       ules.

       Parts of VAX Pascal are still untreated.  In particular,  the  [4m[UNSAFE][0m
       attribute  and a few others are not fully supported, nor are the seman‚Äê
       tics of the [4mOPEN[24m procedure.

       Turbo and VAX Pascal's [4mdouble,[24m [4mquadruple,[24m and [4mextended[24m real  types  all
       translate to the C [1mdouble [22mtype.  Turbo's [4mcomputational[24m type is not sup‚Äê
       ported at all.

       Because Pascal strings  (with  length  bytes)  are  translated  into  C
       strings  (with null terminators), certain Pascal string tricks will not
       work in the translated code.  For example the  assignment  [4ms[0]:=chr(x)[0m
       is  translated  to  [4ms[x]=0[24m  on  the assumption that the string is being
       shortened.  If [4mx[24m is actually greater than the current length,  but  not
       of  a  recognizable form like [4mord(s[0])+n,[24m then the generated code will
       not work.  In VAX Pascal this corresponds to performing  arithmetic  on
       the [4mLENGTH[24m field of a varying-length string.

       Turbo  Pascal's  automatic  clipping  of  strings is not supported.  In
       Turbo, if a ten character string is assigned to a  [4mstring[8][24m  variable,
       the last two characters are silently removed.  The code produced by [4mp2c[0m
       generally will overrun the target string instead!  The [1mStringTruncLimit[0m
       parameter  (80  by  default  if [1mLanguage[22m=[1mTurbo[22m) specifies a string size
       which should be considered  "short";  assignments  of  potentially-long
       strings  to  short  string  variables will cause a warning but will not
       automatically truncate.  The cure is to use [4mcopy[24m in the  Pascal  source
       to truncate the strings explicitly.

[1mFILES[0m
       file.[4mxxx[24m                                   Pascal source files
       file.c                                     resulting C source file
       module.h                                   resulting C header file
       p2crc                                      local configuration file
       .p2crc                                     alternate  local  configura‚Äê
       tion file
       /cygdrive/d/Dwight/ndpic/src/p2c/src/p2crc system-wide    configuration
       file
       /cygdrive/d/Dwight/ndpic/src/p2c/src/system.impdeclarations  for prede‚Äê
       fined functions
       /cygdrive/d/Dwight/ndpic/src/p2c/src/system.m2analogous    declarations
       for Modula-2
       /cygdrive/d/Dwight/ndpic/src/p2c/src/*.imp interface  text for standard
       modules
       /cygdrive/d/Dwight/ndpic/src/p2c/src/p2c.h header file  for  translated
       programs
       /cygdrive/d/Dwight/ndpic/src/p2c/src/libp2c.arun-time library

[1mAUTHOR[0m
       Dave Gillespie, daveg@synaptics.com.

       Many  thanks  to  William Bader, Steven Levi, Rick Koshi, Eric Raymond,
       Magne Haveraaen, Dirk Grunwald, David Barto, Paul Fisher,  Tom  Schnei‚Äê
       der,  Dick Heijne, Guenther Sawitzki, and many others whose suggestions
       and bug reports have helped improve [4mp2c[24m in countless ways.



                                     local                              P2C(1)
